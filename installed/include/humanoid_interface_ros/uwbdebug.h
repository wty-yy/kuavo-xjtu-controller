// Generated by gencpp from file humanoid_interface_ros/uwbdebug.msg
// DO NOT EDIT!


#ifndef HUMANOID_INTERFACE_ROS_MESSAGE_UWBDEBUG_H
#define HUMANOID_INTERFACE_ROS_MESSAGE_UWBDEBUG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace humanoid_interface_ros
{
template <class ContainerAllocator>
struct uwbdebug_
{
  typedef uwbdebug_<ContainerAllocator> Type;

  uwbdebug_()
    : robot_uwb_cur_x(0.0)
    , robot_uwb_cur_y(0.0)
    , robot_uwb_cur_angle(0.0)
    , robot_uwb_fir_angle(0.0)
    , robot_uwb_fir_x(0.0)
    , robot_uwb_fir_y(0.0)
    , robot_uwb_avr_x(0.0)
    , robot_uwb_avr_y(0.0)  {
    }
  uwbdebug_(const ContainerAllocator& _alloc)
    : robot_uwb_cur_x(0.0)
    , robot_uwb_cur_y(0.0)
    , robot_uwb_cur_angle(0.0)
    , robot_uwb_fir_angle(0.0)
    , robot_uwb_fir_x(0.0)
    , robot_uwb_fir_y(0.0)
    , robot_uwb_avr_x(0.0)
    , robot_uwb_avr_y(0.0)  {
  (void)_alloc;
    }



   typedef float _robot_uwb_cur_x_type;
  _robot_uwb_cur_x_type robot_uwb_cur_x;

   typedef float _robot_uwb_cur_y_type;
  _robot_uwb_cur_y_type robot_uwb_cur_y;

   typedef float _robot_uwb_cur_angle_type;
  _robot_uwb_cur_angle_type robot_uwb_cur_angle;

   typedef float _robot_uwb_fir_angle_type;
  _robot_uwb_fir_angle_type robot_uwb_fir_angle;

   typedef float _robot_uwb_fir_x_type;
  _robot_uwb_fir_x_type robot_uwb_fir_x;

   typedef float _robot_uwb_fir_y_type;
  _robot_uwb_fir_y_type robot_uwb_fir_y;

   typedef float _robot_uwb_avr_x_type;
  _robot_uwb_avr_x_type robot_uwb_avr_x;

   typedef float _robot_uwb_avr_y_type;
  _robot_uwb_avr_y_type robot_uwb_avr_y;





  typedef boost::shared_ptr< ::humanoid_interface_ros::uwbdebug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::humanoid_interface_ros::uwbdebug_<ContainerAllocator> const> ConstPtr;

}; // struct uwbdebug_

typedef ::humanoid_interface_ros::uwbdebug_<std::allocator<void> > uwbdebug;

typedef boost::shared_ptr< ::humanoid_interface_ros::uwbdebug > uwbdebugPtr;
typedef boost::shared_ptr< ::humanoid_interface_ros::uwbdebug const> uwbdebugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::humanoid_interface_ros::uwbdebug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::humanoid_interface_ros::uwbdebug_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::humanoid_interface_ros::uwbdebug_<ContainerAllocator1> & lhs, const ::humanoid_interface_ros::uwbdebug_<ContainerAllocator2> & rhs)
{
  return lhs.robot_uwb_cur_x == rhs.robot_uwb_cur_x &&
    lhs.robot_uwb_cur_y == rhs.robot_uwb_cur_y &&
    lhs.robot_uwb_cur_angle == rhs.robot_uwb_cur_angle &&
    lhs.robot_uwb_fir_angle == rhs.robot_uwb_fir_angle &&
    lhs.robot_uwb_fir_x == rhs.robot_uwb_fir_x &&
    lhs.robot_uwb_fir_y == rhs.robot_uwb_fir_y &&
    lhs.robot_uwb_avr_x == rhs.robot_uwb_avr_x &&
    lhs.robot_uwb_avr_y == rhs.robot_uwb_avr_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::humanoid_interface_ros::uwbdebug_<ContainerAllocator1> & lhs, const ::humanoid_interface_ros::uwbdebug_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace humanoid_interface_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::humanoid_interface_ros::uwbdebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::humanoid_interface_ros::uwbdebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_interface_ros::uwbdebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_interface_ros::uwbdebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_interface_ros::uwbdebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_interface_ros::uwbdebug_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::humanoid_interface_ros::uwbdebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a496166c5de3c06085e7947afcc759bc";
  }

  static const char* value(const ::humanoid_interface_ros::uwbdebug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa496166c5de3c060ULL;
  static const uint64_t static_value2 = 0x85e7947afcc759bcULL;
};

template<class ContainerAllocator>
struct DataType< ::humanoid_interface_ros::uwbdebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "humanoid_interface_ros/uwbdebug";
  }

  static const char* value(const ::humanoid_interface_ros::uwbdebug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::humanoid_interface_ros::uwbdebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 机器人uwb x,y 轴滤波后的效果\n"
"float32 robot_uwb_cur_x\n"
"float32 robot_uwb_cur_y\n"
"float32 robot_uwb_cur_angle\n"
"float32 robot_uwb_fir_angle\n"
"float32 robot_uwb_fir_x\n"
"float32 robot_uwb_fir_y\n"
"float32 robot_uwb_avr_x\n"
"float32 robot_uwb_avr_y\n"
;
  }

  static const char* value(const ::humanoid_interface_ros::uwbdebug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::humanoid_interface_ros::uwbdebug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_uwb_cur_x);
      stream.next(m.robot_uwb_cur_y);
      stream.next(m.robot_uwb_cur_angle);
      stream.next(m.robot_uwb_fir_angle);
      stream.next(m.robot_uwb_fir_x);
      stream.next(m.robot_uwb_fir_y);
      stream.next(m.robot_uwb_avr_x);
      stream.next(m.robot_uwb_avr_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct uwbdebug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::humanoid_interface_ros::uwbdebug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::humanoid_interface_ros::uwbdebug_<ContainerAllocator>& v)
  {
    s << indent << "robot_uwb_cur_x: ";
    Printer<float>::stream(s, indent + "  ", v.robot_uwb_cur_x);
    s << indent << "robot_uwb_cur_y: ";
    Printer<float>::stream(s, indent + "  ", v.robot_uwb_cur_y);
    s << indent << "robot_uwb_cur_angle: ";
    Printer<float>::stream(s, indent + "  ", v.robot_uwb_cur_angle);
    s << indent << "robot_uwb_fir_angle: ";
    Printer<float>::stream(s, indent + "  ", v.robot_uwb_fir_angle);
    s << indent << "robot_uwb_fir_x: ";
    Printer<float>::stream(s, indent + "  ", v.robot_uwb_fir_x);
    s << indent << "robot_uwb_fir_y: ";
    Printer<float>::stream(s, indent + "  ", v.robot_uwb_fir_y);
    s << indent << "robot_uwb_avr_x: ";
    Printer<float>::stream(s, indent + "  ", v.robot_uwb_avr_x);
    s << indent << "robot_uwb_avr_y: ";
    Printer<float>::stream(s, indent + "  ", v.robot_uwb_avr_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUMANOID_INTERFACE_ROS_MESSAGE_UWBDEBUG_H
